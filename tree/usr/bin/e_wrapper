#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
#el_make_environment
. gettext.sh
TEXTDOMAIN="desktopwrapper"
export TEXTDOMAIN
export EL_REPORTS=1


# no need to enable since we have el_error & debug info
#export NOREPORTS=1
#set -x
#_el_debug="$EL_DEBUG"
#export EL_DEBUG=3
# we should not use this or we will always get exit errors ? no, we want to catch all the signals to correctly exit_error triggers
# seems like we don't need it at all, HUP signal is catched without it
#set -E

# TODO: every X time, delete the cached freedesktops (once per week?)
# TODO: check if user is using the default Elive wallapaper and otherwise do something (change it back? ask? ... ) using other wallpapers makes the desktop less usable due to color replacements

counter_crash_amount=0
counter_crash_fast_amount=0

limit_crash_amount=4
limit_crash_time=240 # previous crash happened in less than 4 minutes
limit_logs_check="$(( 4 * 60 * 60 ))" # four hours
limit_autoreload_check="$(( 4 * 24 * 60 * 60 ))" # 4 days
#limit_upgrader_check="$(( 23 * 60 * 60 ))" # each day

# limit of time that E can be paused before to be considered a block
# FIXME: use bigger value if the computer is slow
limit_paused_time="60"
cpubogomips="$( grep bogomips /proc/cpuinfo | sed -e 's|^.*: ||g' -e 's|\..*$||g' | tr ' ' '\n' | grep "[[:digit:]]" | head -1 )"
# 3350 (1.66 nettop), 1800 (900mhz)
if [[ "$cpubogomips" -lt 1500 ]] ; then
    limit_paused_time="180"
else
    if [[ "$cpubogomips" -lt 1900 ]] ; then
        limit_paused_time="120"
    else
        if [[ "$cpubogomips" -lt 3500 ]] ; then
            limit_paused_time="90"
        fi
    fi
fi

if grep -qs "boot=live" "/proc/cmdline" ; then
    is_live=1
fi
if grep -qsi "ecorenovsync" "/proc/cmdline" ; then
    export ECORE_NO_VSYNC=1
fi

counter_logs_time_last="$( LC_ALL=C  date +%s )"
counter_autoreload_time_last="$( LC_ALL=C date +%s )"
#counter_upgrader_time_last="$( LC_ALL=C date +%s )"
pid_wrapper="$$"

exit_ok(){
    if ! [[ -d "/tmp/e-${USER}@0" ]] && ! [[ -d "/tmp/e-${USER}@1" ]] ; then
        killall ecomorph 1>/dev/null 2>&1 || killall -9 ecomorph 1>/dev/null 2>&1 || true
    fi
}
exit_error(){
    exit_status="$?"

    # TODO: remove
    # note: if user do "reboot" from a terminal in X, E exits with the signal 129, so maybe is a good thing to note these signals and tell the user that he didn't exited correctly
    # nope: if you shutdown from the menu you have the same signal
    #el_warning "${FUNCNAME} received signal $exit_status \n\nE instances:\n$(ps ux | grep -vE "(grep)" | grep enlightenment)"

    unset exit_status
    exit 0
}

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 3 5 6 14 15 TERM HUP


check_updated_configurations(){
    local package_e17conf_installed_version

    # get the package installed version
    #package_e17conf_installed_version="$( LC_ALL=C apt-cache madison e17-conf | awk -v FS='|' '{print $2}' | head -1 )"
    package_e17conf_installed_version="$( LC_ALL=C dpkg-query -W e17-conf | awk '{print $2}' | tail -1 )"
    read -r package_e17conf_installed_version <<< "$package_e17conf_installed_version"


    if [[ -n "$package_e17conf_installed_version" ]] ; then
        if [[ "$conf_package_e17conf_installed_version_prev" ]] && [[ -d "$HOME/.e" ]] ; then
            if [[ "${package_e17conf_installed_version}" != "$conf_package_e17conf_installed_version_prev" ]] ; then
                # ask if upgrade the E confs
                gtk_set_theme
                precache /usr/bin/enlightenment &

                if timeout 180 zenity --question --text="$( eval_gettext "Upgrade Desktop? Elive released new configuration updates. It's recommended to upgrade it to have the latest Elive improvements, but you will lose your personal desktop settings if you have changed anything, like extra loaded modules, your own keybindings, or other personal desktop configurations that will be restarted. Upgrade desktop now?" )" ; then

                    cd "$HOME/.e"
                    bkp remove 1>/dev/null 2>&1 || true
                    cd

                    NOREPORTS=1 elive-skel upgrade ".e"
                    rm -rf "$HOME/.cache/efreet"
                    sync
                    is_conf_upgraded=1
                fi

                # remember the new version
                conf_package_e17conf_installed_version_prev="$package_e17conf_installed_version"
                el_config_save "conf_package_e17conf_installed_version_prev"
            fi
        else
            # new conf, save it
            conf_package_e17conf_installed_version_prev="$package_e17conf_installed_version"
            el_config_save "conf_package_e17conf_installed_version_prev"
        fi
    fi
}

gtk_set_theme(){
    if [[ -s "$HOME/.xsettingsd" ]] && [[ -x "/usr/bin/xsettingsd" ]] ; then
        ( xsettingsd 1>/dev/null 2>&1 & )
    fi
}

dbus_get_new_address(){
    local pong displayid PID address

    # Note: this may be not a very reliable way to get the dbus address, (not tested) what if more than one desktop run?
    # update: having another X session loses our eremote pings, no matter if we have this dbus address or not

    # first check, do we need to update it?
    #pong="$( LC_ALL=C timeout 5 enlightenment_remote -ping 2>/dev/null || true )"
    if [[ -n "$DBUS_SESSION_BUS_ADDRESS" ]] ; then
        pong="$( LC_ALL=C DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS" timeout 5 enlightenment_remote -ping 2>/dev/null || true )"

        if [[ "$pong" != *"pong" ]] ; then
            unset DBUS_SESSION_BUS_ADDRESS address pong
        fi
    fi

    # this is the most reliable and "real" way that we can have to get the address (fetched directly from the environment variable of the system)
    if [[ -z "$DBUS_SESSION_BUS_ADDRESS" ]] ; then
        if [[ -s "$HOME/.cache/dbus-session-address-last.txt" ]] ; then
            address="$( cat "$HOME/.cache/dbus-session-address-last.txt" | tail -1 )"
            pong="$( LC_ALL=C DBUS_SESSION_BUS_ADDRESS="$address" timeout 5 enlightenment_remote -ping 2>/dev/null || true )"

            if [[ "$pong" = *"pong" ]] ; then
                export DBUS_SESSION_BUS_ADDRESS="$address"
            else
                unset address DBUS_SESSION_BUS_ADDRESS pong
            fi
        fi
    fi

    # correct place where it should be stored
    if [[ -z "$DBUS_SESSION_BUS_ADDRESS" ]] ; then
        displayid="${DISPLAY##*:}"
        displayid="${displayid%%.*}"

        # this is not enough, because by default we use gnome-keyring which changes the address
        #pong="$( eval $( cat "$HOME/.dbus/session-bus/$(cat /var/lib/dbus/machine-id)-${displayid}" | grep --color=never "^DBUS_SESSION_BUS_ADDRESS=" ) enlightenment_remote -ping 2>/dev/null )"
        dbus_session_file="$HOME/.dbus/session-bus/$(cat /var/lib/dbus/machine-id)-${displayid}"

        if grep -qs "DBUS_SESSION_BUS_ADDRESS" "$dbus_session_file" ; then
            source "$dbus_session_file"
            export DBUS_SESSION_BUS_ADDRESS DBUS_SESSION_BUS_PID
        fi

        pong="$( LC_ALL=C DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS" timeout 5 enlightenment_remote -ping 2>/dev/null || true )"

        if ! [[ "$pong" = *"pong" ]] ; then
            unset address DBUS_SESSION_BUS_ADDRESS DBUS_SESSION_BUS_PID pong
        fi
    fi

    # final alternative way
    if [[ -z "$DBUS_SESSION_BUS_ADDRESS" ]] ; then
        for PID in $( pgrep -f gnome-keyring ) $e_start_pid
        do
            [[ -z "$PID" ]] && continue
            pong="$( DBUS_SESSION_BUS_ADDRESS="$(grep -z DBUS_SESSION_BUS_ADDRESS /proc/$PID/environ 2>/dev/null | cut -d= -f1- )" timeout 5 enlightenment_remote -ping 2>/dev/null )"

            if [[ "$pong" = *"pong" ]] ; then
                address="$(grep -z DBUS_SESSION_BUS_ADDRESS /proc/$PID/environ 2>/dev/null | cut -d= -f1- )"
                break
            fi
        done

        if [[ "$pong" = *"pong" ]] ; then
            export DBUS_SESSION_BUS_ADDRESS="$address"
        else
            unset address pong
        fi
    fi


    # if we still have not, get the most reliable option (user may be in a console and thats why we cannot ping, so fallback to this option then)
    #if [[ "$pong" != *"pong" ]] ; then
        #if [[ -s "$HOME/.cache/dbus-session-address-last.txt" ]] ; then
            #DBUS_SESSION_BUS_ADDRESS="$( cat "$HOME/.cache/dbus-session-address-last.txt" | tail -1 )"
        #fi
    #fi

    # export result
    if [[ -n "$DBUS_SESSION_BUS_ADDRESS" ]] ; then
        echo "$DBUS_SESSION_BUS_ADDRESS" > "$HOME/.cache/dbus-session-address-last.txt"
    fi
}

cleanups_pre(){
    local file
    # remove old unused sockets
    while read -ru 3 file
    do
        # checks if there's a process using the socked and if not, removes it
        if echo "$file" | grep -qsE -- "-($( pidof enlightenment_start enlightenment | sed -e 's/ /|/g' ))\|" ; then
            true
            #echo "found $file"
        else
            true
            rm -f "$file" || true
        fi
    done 3<<< "$( find /tmp/e-"${USER}"@*/ -type s 2>/dev/null )"
    rmdir /tmp/e-"${USER}"@* 2>/dev/null || true

    # remove last dbus address cached, since we are going to create a new one
    rm -f "$HOME/.cache/dbus-session-address-last.txt"
}
restart_desktop_configuration(){
    # elive-skel upgrade {{{
    if ((is_live)) ; then
        rm -r "$HOME/.e"
        rm -rf "$HOME/.cache/efreet"
    else
        # TODO: here and all "restore": show the date of the backup
        if [[ -d "$HOME/.e" ]] \
            && [[ "$( cd "$HOME/.e" ; if LC_ALL=C bkp list | grep -qs " directory$" ; then echo yes ; else echo no ; fi )" = "yes" ]] \
            && timeout 40 zenity --question --text="$( eval_gettext "Would you like to restore your desktop configurations from a recent backup instead of creating a new one?" )" ; then

            cd "$HOME/.e"
            bkp get
            cd
        else
            NOREPORTS=1 elive-skel upgrade ".e"
            rm -rf "$HOME/.cache/efreet"
        fi
    fi

    # restart counter and variable
    conf_is_e_restarted_fast_too_much=0
    el_config_save "conf_is_e_restarted_fast_too_much"
    # - elive-skel upgrade }}}
    # notify user {{{
    if el_check_version_is_days_recent 40 ; then
        el_speak_text "a-live desktop configuration upgraded"
    fi

    timeout 50 zenity --info --text="$( eval_gettext "Your desktop configuration has been restored. The backup of the old desktop configuration is here:" )\n$HOME/.e.old"

    # - notify user }}}
}

verify_desktop_health(){
    # E seems like to be unusable due to too much crashes {{{
    if ! [[ -d "$HOME/.e" ]] ; then
        return 0
    fi
    # no need to recover if new conf
    if ((is_conf_upgraded)) ; then
        unset is_conf_upgraded
        return 0
    fi

    # TODO FIXME: seems like this code is only run when the destkop starts? we want it to be run in loop too, so let's enalbe this for the next 3.x beta versions (check if destkop restarted too much in order to restart configurations)
    if ((conf_is_e_restarted_fast_too_much)) ; then
        #el_speak_text "desktop restarted too much, suggested to start with a new configuration"

        # check and show specific messages about crashes before to suggest anything
        crashes_messages

        gtk_set_theme
        if timeout 40 zenity --question --text="$( eval_gettext "Your desktop seems to have crashed too many times recently. Would you like to restart to a new clean desktop configuration?" )" ; then
            restart_desktop_configuration
        fi

        # restart counter
        conf_is_e_restarted_fast_too_much=0
        el_config_save "conf_is_e_restarted_fast_too_much"

        el_warning "E restarted fastly too much - versions:\n$(dpkg -l | grep -E "^ii.*(libefl1|e17-stable|e17|elive-tools|deliver|elive-desktop)" | awk '{print $2" : "$3}' )"
    else
        # always do a backup before to start, this will be run in the loop checker
        if ! ((is_live)) ; then
            if [[ -d "$HOME/.e" ]] && [[ "$( LC_ALL=C du -s "$HOME/.e" | awk '{print $1}' )" -gt 400 ]] ; then
                is_backup_wanted=1
            fi
        fi
    fi

    # was the shutdown forced?
    if [[ -e "/var/tmp/elivehealth/elive-system-shutdown-forced" ]] && grep -qs "^yes$" "/var/tmp/elivehealth/elive-system-shutdown-forced" ; then
        if zenity --question --text="$( eval_gettext "Your computer has been forcefully shut down. This is very bad for your data and can also break your desktop configurations. Do you want to recover a backup of your desktop from a previous state? (If you don't know, select Yes.)" )" ; then
            true
        fi
        # remove the verification file
        echo "user notified pre" > "/var/tmp/elivehealth/elive-system-shutdown-forced"
    fi

    # }}}
}

#verify_configuration_validity(){
    ## verify configurations {{{
    ## TODO: check confs of different settings (one for each, like pager, ibox, etc)
    #el_check_variables "E_CONF_PROFILE"

    ## TODO: we can use enlightenment_remote -module-list | grep "pager -- Enabled" to know if module is loaded or not

    #if [[ -s "$HOME/.e/e17/config/$E_CONF_PROFILE/e.cfg" ]] ; then
        #cd "$HOME/.e/e17/config/$E_CONF_PROFILE"
        #eet -d e.cfg config e.cfg.src
        #while read -ru 3 line
        #do
            #el_debug "$line"
            #if [[ "$line" = *"group \"E_Config_Module\" struct {"* ]] ; then
                #el_warning "config structure"
            #fi
        #done 3<<< "$( cat "e.cfg.src")"


    #else
        #el_error "Invalid E profile using? $E_CONF_PROFILE"
    #fi
    ## - verify configurations }}}
    ## restore desktop {{{
    #if ((conf_is_e_configuration_invalid)) ; then
        #if zenity --question --text="$( eval_gettext "Seems like your desktop has an invalid configuration. Do you want to restart to a new configuration?" )" ; then
            #restart_desktop_configuration
        #fi

        ## restart counter
        #conf_is_e_configuration_invalid=0
        #el_config_save "conf_is_e_configuration_invalid"
    #fi
    ## - restore desktop }}}
#}

crashes_messages(){
    if [[ -s "$HOME/.e-crashdump.txt" ]] ; then

        # some strange ATI cards that reports crashes:
        if grep -qs "dri/r300_dri\.so" "$HOME/.e-crashdump.txt" ; then
            notify-send -t 90000 "Desktop Drivers" "$( eval_gettext "Elive detected that you have an ATI graphic card, which are known in Linux for their multiple issues. We suggest replacing it with an Nvidia card if possible. Another option if you still have problems is to disable the hardware-accelerated rendering for your desktop and switch it to software mode. In that case, your desktop may feel a bit slower but it'll be more stable." )" &
        fi
    fi
}

crashes_watcher(){
    if [[ -s "$HOME/.e-crashdump.txt" ]] ; then
        counter_crash_time_last="$( echo "$(date +%s) - $( stat -c %Z "$HOME/.e-crashdump.txt" )" | LC_ALL=C bc -l | sed -e 's|\..*$||g' )"
        counter_crash_amount="$(( $counter_crash_amount + 1 ))"

        if [[ "$counter_crash_time_last" -lt "$limit_crash_time" ]] ; then
            counter_crash_fast_amount="$(( $counter_crash_fast_amount + 1 ))"
        else
            counter_crash_fast_amount=0
        fi

        if [[ "$counter_crash_fast_amount" -gt "$limit_crash_amount" ]] ; then
            conf_is_e_restarted_fast_too_much=1
            el_config_save "conf_is_e_restarted_fast_too_much"
        else
            # restart counter
            conf_is_e_restarted_fast_too_much=0
            el_config_save "conf_is_e_restarted_fast_too_much"
        fi

        # too much restarts? check confs and tell the user
        if ((conf_is_e_restarted_fast_too_much)) ; then
            crashes_messages
        fi
    fi
}


send_e_crash_to_elive(){
    # report anonymous crashes to elive (with user's permission) {{{
    #local eliveversion send_debug_reports_email send_debug_reports id

    if ((is_e_restarted)) ; then
        unset is_e_restarted
    else
        # TODO: enable the dpkg && in the future (after to have received enough reoprts), so that the debug info will be included or otherwise not sent
            #&& dpkg -l | grep "^ii" | awk '{print $2}' | grep -qsE "e17(-stable)?-dbg" \
        if [[ -s "$HOME/.e-crashdump.txt" ]] \
            && el_verify_internet ; then
            crashes_watcher

            # send debug reports {{{
            if [[ -s "/etc/elive/settings" ]] ; then
                source "/etc/elive/settings" 1>/dev/null 2>&1
            fi
            # if user has not configured the reports configurator is not a problem: el_error & others will ask about that (one time)
            if [[ -s "$HOME/.config/elive/settings" ]] ; then
                source "$HOME/.config/elive/settings"
            fi

            if [[ "$send_debug_reports" = "yes" ]] ; then
                #eliveversion="$( awk '$1 ~ /elive-version/ {($1="");print $0}' /etc/elive-version | sed 's/^\ //g' )"
                eliveversion="$( el_elive_version_get )"
                # create an unique identifier
                if el_check_sudo_automated ; then
                    id="$( timeout 3 sudo blkid | grep -oP 'UUID="\K[^"]+' | sha256sum | awk '{print $1}' || true )"
                else
                    id="$( ip a | grep -E "(link/ether|fe80)" | sha256sum | awk '{print $1}' || true )"
                fi

                if [[ -z "$send_debug_reports_email" ]] ; then
                    send_debug_reports_email="anonymous:${id}"
                fi


                # send
                if ! { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1 ; then

                    LC_ALL=C sleep 2
                    if ! { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1 ; then

                        LC_ALL=C sleep 4
                        { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1

                        fi
                    fi
                fi

                # }}}

        fi
    fi

    rm -f "$HOME/.e-crashdump.txt"

    # }}}
}

restart_enlightenment(){
    # pre {{{
    local pid is_e_restarted fullprocess eliveversion is_silent

    if [[ "${1}" = "silent" ]] ; then
        is_silent=1
    fi
    # we had before anything useful to report?
    # note: send it before to kill (or the crashdump will have our kill instead)
    send_e_crash_to_elive

    # }}}
    # kill all our E processes running {{{
    while read -ru 3 pid
    do
        [[ -z "$pid" ]] && continue

        #fullprocess="$( ps ux | grep -E "\s+$pid\s+" | grep -vE "(enlightenment_alert|e-crashdump)" )"

        # kill only if the alert is not shown
        if ! ps ux | grep -qsE "\s+$pid\s+(enlightenment_alert|e-crashdump)" ; then

            kill -s SIGSEGV "$pid" 2>/dev/null || true
            is_e_restarted=1

            # TODO: delete
            #el_error "E blocked, killing '$pid' to recover it: $fullprocess"
        fi

    done 3<<< "$( ps ux | grep "/usr/bin/enlightenment$" | grep -vE "(enlightenment_alert|e-crashdump)" | awk '{print $2}' )"

    # }}}
    # notify user that E has been restarted by Elive {{{
    if ((is_e_restarted)) && ! ((is_silent)) ; then
        #el_notify "normal" "logo-elive" "Enlightnement Restarted" "Elive recovered a crash of your desktop saving your working state and opened windows. Thank you Elive!"
        # tell the user in a very nice fashion way
        if el_check_version_is_days_recent 14 ; then
            el_speak_text "ai-live desktop initiated recovery"
        fi

        LC_ALL=C sleep 20
        notify-send -t 60000 "Enlightnement Restarted" "$( eval_gettext "Elive detected a failure and recovered the desktop while keeping your windows open. If you want to report an issue to Elive so we can fix it, first try to reproduce the issue, then describe the steps to reproduce it." )" &

        # see if we restarted too much, if so, it will be asked to recover configuration in the next startx
        crashes_watcher

        # this will delete the variable and the crashdump
        send_e_crash_to_elive

        # verify statuses TODO: enable it for the next 3.x beta versions (we dont want to have a flood of messages in the stable version so better to betatest it some time first)
        #verify_desktop_health

        # we never want this backtrace, so we killed it manually, no useful info here
        #rm -f "$HOME/.e-crashdump.txt"
    fi

    # restart was needed, so check if we have a new address
    if ((is_e_restarted)) ; then
        dbus_get_new_address
    fi


    # }}}
}

watch_enlightenment_blocked(){
    local pong count

    # wait for things initiated {{{
    # note: my E requires 90 seconds to load (Xmodfiers bloated)
    for count in $( seq 40 ) ; do
        pong="$( LC_ALL=C timeout 5 enlightenment_remote -ping 2>/dev/null || true )"
        if [[ "$pong" = *"pong" ]] ; then
            break
        else
            LC_ALL=C sleep 2
            # do not waste time if the graphical system is unable to launch in live mode
            if ((is_live)) ; then
                break
            fi
        fi
    done

    # we need to have this variable set in order to be able to ping
    if [[ -z "$DBUS_SESSION_BUS_ADDRESS" ]] || [[ "$pong" != *"pong" ]] ; then
        dbus_get_new_address
    fi

    # }}}
    while true
    do
        unset pong

        # note: if E is running with a slow process, it can feel blocked too (like programmers-kb-layout-switch)
        # max time to see if E is not blocked: 48 seconds, we should not have anything pausing E for more than this time
        for count in $( seq $(( $limit_paused_time / 2 )) ) ; do
            #pong="$( LC_ALL=C timeout 5 enlightenment_remote -ping 2>/dev/null || true )"
            pong="$( LC_ALL=C DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS" timeout 5 enlightenment_remote -ping 2>/dev/null || true )"

            # only for debug purposes: logs
            #echo "ping: $pong | count: $count | dbus: $DBUS_SESSION_BUS_ADDRESS | DISPLAY: $DISPLAY | XAUTHORITY: $XAUTHORITY | E_IPC_SOCKET: $E_IPC_SOCKET" | tee -a /tmp/e-${USER}-logs.txt

            if [[ "$pong" = *"pong" ]] ; then
                # pong is ok
                break
            else
                # note: we should only rely in our e_start_pid, which is the only one that is not closed until E really closes
                # Notes: this kill test is not totally correct, it pauses so the counter starts counting as it is wrong, and maybe: basically we cannot PING because we don't have access to the dbus anymore, hum
                # Wait: seems like it works when run in daemon, we need XAUTHORITY, DISPLAY and E_IPC_SOCKET variables
                if LC_ALL=C kill -0 $e_start_pid 2>/dev/null ; then
                    # we have our E START still running
                    LC_ALL=C sleep 2
                else
                    # no pong and no pid, E should have been closed
                    break 2
                fi
            fi
        done

        # if we didn't had a pong in our max amount of attemps, restart
        if ! [[ "$pong" = *"pong" ]] ; then
            # if we go to another TTY, seems like eremote ping stops to work, so make sure that just don't have other E sessions running instead of going to restart the desktops:
            # also, make sure that the user is in a TTY
            if ! [[ -s "/home/thana/.e/e17/config/standard/e.1.cfg" ]] || ps ux | grep -v grep | grep -qsE "/usr/lib/(deliver|user-manager)/hooks.d/e17-wizard" ; then
                # we don't have yet finished to set up E, don't restart
                # or user is running a wizard hook (like a waiting dialog window)
                true
            else
                # also check that the user is not simply in a console
                if cat /sys/class/tty/tty0/active 2>/dev/null | grep -qsE "^tty(1|2|3|4|5|6|8|9|10|11|12)$" ; then
                    # user is walking in the consoles, ignore the lack of pings and continue
                    # if user is switching to another user (lightdm starting other user session, but waiting on the login manager), the tty shown is tty8, so we should include any tty except tty7
                    true
                else
                    e_start_pids_all="$( pidof enlightenment_start )"
                    if [[ -n "$e_start_pids_all" ]] && [[ "$( echo "$e_start_pids_all" | wc -w )" -gt 1 ]] ; then
                        # we have opened more than one E sessions (and/or different users), ignore entirely the lack of ping and continue
                        true
                    else
                        # note: this could happen too if dbus is not running under E
                        restart_enlightenment
                    fi
                fi
            fi
        fi

        #all good, don't bottleneck per loop
        LC_ALL=C sleep 4



        # did we wanted to do a backup?
        if ((is_backup_wanted)) ; then
            unset is_backup_wanted

            if [[ -d "$HOME/.e" ]] ; then
                DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS" enlightenment_remote -save

                cd "$HOME/.e"
                bkp remove 1>/dev/null 2>&1 || true
                sync
                bkp save 1>/dev/null 2>&1
                cd
            fi
        fi


        counter_time_now="$( LC_ALL=C date +%s )"

        # cleanup logs
        if [[ "$counter_time_now" -gt "$(( $counter_logs_time_last + $limit_logs_check ))" ]] ; then
            counter_logs_time_last="$( LC_ALL=C date +%s )"

            if [[ "$( du -s "$HOME/.xsession-errors" | awk '{print $1}' )" -gt 20000 ]] ; then
                #el_warning "cleaned xsession-errors file because has more than 20 MB"
                : > "$HOME/.xsession-errors"
            fi
        fi
        # restart E after some amount of time to free some memory
        if [[ "$counter_time_now" -gt "$(( $counter_autoreload_time_last + $limit_autoreload_check ))" ]] ; then
            counter_autoreload_time_last="$( LC_ALL=C date +%s )"
            restart_enlightenment silent
        fi

        # run elive-upgrader if new things are found
        # update: this conflicts with the tool launched in desktop, we don't need to run it here unless something critical is needed, disable for now. Requires: to run before desktop starts, a flag to know when a critical update is needed (and not a timer), etc... maybe something interactive or check modes
        #if [[ "$counter_time_now" -gt "$(( $counter_upgrader_time_last + $limit_upgrader_check ))" ]] ; then
            #counter_upgrader_time_last="$( LC_ALL=C date +%s )"
            ## run elive-upgrader, only if user has it enabled on the autostart applications
            #if grep -qs "elive-upgrader" "$HOME/.e/e17/applications/startup/.order" ; then
                #elive-upgrader
            #fi
        #fi

    done
}

main(){
    # pre {{{


    # }}}

    # note: this can be nice but maybe the user has selected its own icon theme, so we don't want that
    #if [[ -d "$HOME/.e/e17" ]] ; then
        #cd "$HOME/.e/e17/config/standard"

        #eet -d e.cfg config e.cfg.src

        #if ! grep -qs "value \"icon_theme\" string: \"gnome\";" e.cfg.src ; then
            #zenity --warning --text="$( eval_gettext "Your icons seems to be wrongly configured, press ok to restart your configuration" )"
            #killall -9 enlightenment
            #rm -rf "$HOME/.e" "$HOME/.xsession-errors"
        #fi

        #rm -f e.cfg.src
    #fi

    cleanups_pre

    el_config_get

    check_updated_configurations

    verify_desktop_health

    elive-multiscreens -l -q -p


    rm -f "$HOME/.xsession-errors"

    # not implemented yet
    #verify_configuration_validity

    # stop daemon after to have used dialogs and before to start the desktop
    killall xsettingsd 2>/dev/null 1>&2 || true

    #
    # Start E
    #
    if ((is_live)) ; then
        # do not save logs in live mode, reduce disk usage (specially useful for persistence)
        TEXTDOMAIN="" \
            conf_is_e_restarted_fast_too_much="" \
            enlightenment_start "$@" &
        e_start_pid="$!"
    else
        TEXTDOMAIN="" \
            conf_is_e_restarted_fast_too_much="" \
            enlightenment_start "$@" 1>"$HOME/.xsession-errors" 2>&1 &
        e_start_pid="$!"
    fi

    # wait that desktop finishes to start before to run checkers
    # no needed: we have a first pre-ping wait
    #sleep 12

    # this watcher stops after no more enlightenment process is running
    watch_enlightenment_blocked

    # watcher checks the pid so this should always finish correctly, but we need to wait for E to close
    # update: if the watcher works correctly we should not reach this step never, don't use the wait since can fail in buster
    # update: seems like it gives problems, probably we just need to wait for needed restarts, let's still use it for wheezy
    if grep -qsE "(^7\.|wheezy)" /etc/debian_version ; then
        wait
    fi


    # trigger correctly the exit callbacks
    exit 0
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

