#!/bin/bash
source /usr/lib/elive-tools/functions
#el_make_environment
. gettext.sh
TEXTDOMAIN="desktopwrapper"
export TEXTDOMAIN

# Note: this tool has no way to determine which E instance are you running (in case that you are running multiple instances, which is not something very common at all), but it will work with all of them at the same time (managing multiple pid's at the same time), so if one of them fails, it will restart all the E instances
# TODO: test: what if we exit from one of these instances?

# no need to enable since we have el_error & debug info
export NOREPORTS=1
set -x
#_el_debug="$EL_DEBUG"
#export EL_DEBUG=3
# we should not use this or we will always get exit errors ? no, we want to catch all the signals to correctly exit_error triggers
# TODO: remove, seems like we don't need it at all, HUP signal is catched without it
set -E

counter_crash_amount=0
counter_crash_fast_amount=0

limit_crash_amount=3
limit_crash_time=240 # previous crash happened in less than 4 minutes
limit_logs_check="$(( 2 * 60 * 60 ))" # two hours

counter_logs_time_last="$( date +%s )"
pid_wrapper="$$"
# unused, don't enable it
#E_CONF_PROFILE="standard"
# FIXME: review all the process from the start to the launch of E and see bottlenecks, specially calling el_error's and others

# Lock system (modified for this tool) {{{

exit_ok(){
    # TODO: when we come back from E to the wrapper, do we have any of these dirs?
    if ! [[ -d "/tmp/e-${USER}@1" ]] ; then
        killall ecomorph 1>/dev/null 2>&1 || killall -9 ecomorph 1>/dev/null 2>&1 || true
    fi
}
exit_error(){
    exit_status="$?"

    el_warning "${FUNCNAME} received signal $exit_status \n\nE instances:\n$(ps ux | grep -vE "(grep)" | grep enlightenment)"

    unset exit_status
    exit 0
}

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
#trap "exit_error" 1 3 5 6 14 15 ERR TERM # ERR trap not works nicely with set -E
# notes: signal 1 is received to E if I ^C in the terminal where running startx /usr/bin/e_wrapper
trap "exit_error" 3 5 6 14 15 TERM HUP
# SIGHUP is signal 129, so ^C
#trap "signal_died" HUP


# end lock system }}}


restart_desktop_configuration(){
    # elive-skel upgrade {{{
    if grep -qs "boot=live" "/proc/cmdline" ; then
        rm -r "$HOME/.e"
    else
        if [[ -d "$HOME/.e" ]] && timeout 40 zenity --question --text="$( eval_gettext "Do you want restore your desktop configuration from your last login instead of restart a new conf?" )" ; then
            cd "$HOME/.e"
            bkp get
            cd
        else
            elive-skel upgrade ".e"
        fi
    fi

    # restart counter and variable
    is_e_restarted_fast_too_much=0
    el_config_save "is_e_restarted_fast_too_much"
    # - elive-skel upgrade }}}
    # notify user {{{
    el_speak_text "a-live desktop configuration upgraded"

    timeout 50 zenity --info --text="$( eval_gettext "Your desktop configuration has been restored, the old configuration is backuped in:" )\n$HOME/.e.old"

    # - notify user }}}
}

verify_desktop_health(){
    # E seems like to be unusable due to too much crashes {{{
    if ! [[ -d "$HOME/.e" ]] ; then
        return
    fi

    if ((is_e_restarted_fast_too_much)) ; then
        # TODO: remove in the future
        el_speak_text "desktop restarted too much, suggested to start with a new configuration"

        if timeout 40 zenity --question --text="$( eval_gettext "Your desktop seems to have recently crashed too much, do you want to restart a new configuration?" )" ; then
            restart_desktop_configuration
        fi

        # restart counter
        is_e_restarted_fast_too_much=0
        el_config_save "is_e_restarted_fast_too_much"

        el_warning "E restarted fastly too much - versions:\n$(dpkg -l | grep -E "^ii.*(libefl1|e17-stable|e17|elive-tools|deliver|elive-desktop)" | awk '{print $2" : "$3}' )"
    else
        # always do a backup before to start, this will be run in the loop checker
        if [[ -d "$HOME/.e" ]] && [[ "$( LC_ALL=C du -s "$HOME/.e" | awk '{print $1}' )" -gt 400 ]] && ! grep -qs "boot=live" "/proc/cmdline" ; then
            is_backup_wanted=1
        fi
    fi

    # }}}
}

#verify_configuration_validity(){
    ## verify configurations {{{
    ## TODO: check confs of different settings (one for each, like pager, ibox, etc)
    #el_check_variables "E_CONF_PROFILE"

    ## TODO: we can use enlightenment_remote -module-list | grep "pager -- Enabled" to know if module is loaded or not

    #if [[ -s "$HOME/.e/e17/config/$E_CONF_PROFILE/e.cfg" ]] ; then
        #cd "$HOME/.e/e17/config/$E_CONF_PROFILE"
        #eet -d e.cfg config e.cfg.src
        #while read -ru 3 line
        #do
            #el_debug "$line"
            #if [[ "$line" = *"group \"E_Config_Module\" struct {"* ]] ; then
                #el_warning "config structure"
            #fi
        #done 3<<< "$( cat "e.cfg.src")"


    #else
        #el_error "Invalid E profile using? $E_CONF_PROFILE"
    #fi
    ## - verify configurations }}}
    ## restore desktop {{{
    #if ((is_e_configuration_invalid)) ; then
        #if zenity --question --text="$( eval_gettext "Seems like your desktop has an invalid configuration. Do you want to restart to a new configuration?" )" ; then
            #restart_desktop_configuration
        #fi

        ## restart counter
        #is_e_configuration_invalid=0
        #el_config_save "is_e_configuration_invalid"
    #fi
    ## - restore desktop }}}
#}

crashes_watcher(){
    if [[ -s "$HOME/.e-crashdump.txt" ]] ; then
        counter_crash_time_last="$( echo "$(date +%s) - $( stat -c %Z "$HOME/.e-crashdump.txt" )" | LC_ALL=C bc -l | sed -e 's|\..*$||g' )"
        counter_crash_amount="$(( $counter_crash_amount + 1 ))"

        if [[ "$counter_crash_time_last" -lt "$limit_crash_time" ]] ; then
            counter_crash_fast_amount="$(( $counter_crash_fast_amount + 1 ))"
        else
            counter_crash_fast_amount=0
        fi

        if [[ "$counter_crash_fast_amount" -gt "$limit_crash_amount" ]] ; then
            is_e_restarted_fast_too_much=1
            el_config_save "is_e_restarted_fast_too_much"
        else
            # restart counter
            is_e_restarted_fast_too_much=0
            el_config_save "is_e_restarted_fast_too_much"
        fi
    fi
}


send_e_crash_to_elive(){
    # report anonymous crashes to elive (with user's permission) {{{
    #local eliveversion send_debug_reports_email send_debug_reports id

    if ((is_e_restarted)) ; then
        unset is_e_restarted
    else
        if [[ -s "$HOME/.e-crashdump.txt" ]] && el_verify_internet ; then
            crashes_watcher

            # send debug reports {{{
            if [[ -s "/etc/elive/settings" ]] ; then
                source "/etc/elive/settings" 1>/dev/null 2>&1
            fi
            # if user has not configured the reports configurator is not a problem: el_error & others will ask about that (one time)
            if [[ -s "$HOME/.config/elive/settings" ]] ; then
                source "$HOME/.config/elive/settings"
            fi

            if [[ "$send_debug_reports" = "yes" ]] ; then
                #eliveversion="$( awk '$1 ~ /elive-version/ {($1="");print $0}' /etc/elive-version | sed 's/^\ //g' )"
                eliveversion="$( el_elive_version_get )"
                # create an unique identifier
                if el_check_sudo_automated ; then
                    id="$( timeout 3 sudo blkid | grep -oP 'UUID="\K[^"]+' | sha256sum | awk '{print $1}' || true )"
                else
                    id="$( ip a | grep -E "(link/ether|fe80)" | sha256sum | awk '{print $1}' || true )"
                fi

                if [[ -z "$send_debug_reports_email" ]] ; then
                    send_debug_reports_email="anonymous:${id}"
                fi


                # send
                if ! { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1 ; then

                    LC_ALL=C sleep 2
                    if ! { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1 ; then

                        LC_ALL=C sleep 4
                        { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1

                        fi
                    fi
                fi

                # }}}

        fi
    fi

    rm -f "$HOME/.e-crashdump.txt"

    # }}}
}

restart_enlightenment(){
    # pre {{{
    local pid is_e_restarted fullprocess eliveversion

    # we had before anything useful to report?
    # note: send it before to kill (or the crashdump will have our kill instead)
    send_e_crash_to_elive

    # }}}
    # kill all our E processes running {{{
    while read -ru 3 pid
    do
        [[ -z "$pid" ]] && continue

        # TODO: delete
        fullprocess="$( ps ux | grep -E "\s+$pid\s+" | grep -vE "(enlightenment_alert|e-crashdump)" )"

        # kill only if the alert is not shown
        if ! ps ux | grep -qsE "\s+$pid\s+(enlightenment_alert|e-crashdump)" ; then

            kill -s SIGSEGV "$pid" 2>/dev/null || true
            is_e_restarted=1

            el_error "E blocked, killing '$pid' to recover it: $fullprocess"
        fi

    done 3<<< "$( ps ux | grep "/usr/bin/enlightenment$" | grep -vE "(enlightenment_alert|e-crashdump)" | awk '{print $2}' )"

    # }}}
    # notify user that E has been restarted by Elive {{{
    if ((is_e_restarted)) ; then
        #el_notify_user "Enlightnement Restarted" "Elive recovered a crash of your desktop saving your working state and opened windows. Thank you Elive!"
        # tell the user in a very nice fashion way
        #el_speak_text "a-live desktop initiated special recovery"
        el_speak_text "ai-live desktop initiated recovery"

        LC_ALL=C sleep 20
        notify-send -t 60000 "Enlightnement Restarted" "$( eval_gettext "Elive detected a failure and recovered your desktop saving your working windows. If you want to report an issue to Elive so we can fix it, please describe what you were going before the recovery." )" &

        # see if we restarted too much, if so, it will be asked to recover configuration in the next startx
        crashes_watcher

        # this will delete the variable and the crashdump
        send_e_crash_to_elive

        # we never want this backtrace, so we killed it manually, no useful info here
        #rm -f "$HOME/.e-crashdump.txt"
    fi


    # }}}
}

watch_enlightenment_blocked(){
    local pong count

    # wait for things initiated {{{
    for count in $( seq 60 ) ; do
        pong="$( LC_ALL=C timeout 5 enlightenment_remote -ping 2>/dev/null || true )"
        if [[ "$pong" = *"pong" ]] ; then
            break
        else
            LC_ALL=C sleep 2
        fi
    done

    # }}}
    while true
    do
        unset pong

        # note: if E is running with a slow process, it can feel blocked too (like programmers-kb-layout-switch)
        # max time to see if E is not blocked: 40 seconds, we should not have anything pausing E for more than this time
        for count in $( seq 20 ) ; do
            pong="$( LC_ALL=C timeout 5 enlightenment_remote -ping 2>/dev/null || true )"
            if [[ "$pong" = *"pong" ]] ; then
                # pong is ok
                break
            else
                if [[ -n "$( pidof enlightenment )" ]] || [[ -n "$( pidof enlightenment_start )" ]] ; then
                    # we have at least one E running
                    LC_ALL=C sleep 2
                else
                    # no pong and no pid, E should have been closed
                    break 2
                fi
            fi
        done

        # if we didn't had a pong in our max amount of attemps, restart
        if ! [[ "$pong" = *"pong" ]] ; then
            # note: this could happen too if dbus is not running under E
            restart_enlightenment
        fi

        #all good, don't bottleneck per loop
        LC_ALL=C sleep 4


        # did we wanted to do a backup?
        if ((is_backup_wanted)) ; then
            unset is_backup_wanted

            if [[ -d "$HOME/.e" ]] ; then
                # wait a bit more to correctly finish startups
                sleep 10
                enlightenment_remote -save

                cd "$HOME/.e"
                bkp remove 1>/dev/null 2>&1
                sync
                bkp save 1>/dev/null 2>&1
                cd
            fi
        fi

    done
}

main(){
    # pre {{{

    # }}}
    # TODO:
    # - trap E that doesn't ping (kill -s SIGSEGV to restart)
    #           - implemented in eremote
    #       - don't ask in the gui if restart, just restart (F1 option)
    # - trap the returning signal by e17, and ask (restore conf?) (should be always 0 ?)
    #       - looks like its not returned as an error (enlightenment_start return is not enlightenment one)
    # - check for configurations to see if user broken something (each 5 minutes maybe could be a good thing)
    # - truncate .xsession-errors every X mb
    # - if multiple crashes (set a counter of crashes and amount of time), ask to the user if restore the default E configuration (like 3 in 1 minute, or 4 in 2 minutes)
    # - in case of sending debug & "anonymous", ask the user if wants to report debug data (and ask for email, so we can contact him), save this conf to /etc
    # XXX: done until here
    # if E has been run for more than X days (RAM usage grows over time) like 1 week, restart it -- or check the memory consumption better (so it can grow faster due to errors, or maybe not-so-needed)
    # incremental backups of E dir (bkp), with automatic restore if user breaks it (instead of restart E conf, which can be a good option too?)
    # include "speaking actions with el_speak_text -f, like: initiating special elive recovering
    #   - what if the user wants to disable them?
    # implement a special way to upgrade the system (in order that we can found bugs after the release, something like an wget or similar..)
    # - if ecomorph is already running, kill it when exiting from E
    # - fill everything with el_error and el_warning, or el_report_bug... to know about things that happens!
    #
    # - if we run E without dbus (or module unloaded?), this tool will lead to inifinite loops, so instead, do a pause asking the user to load the module
    #
    #
    #

    #if [[ -d "$HOME/.e/e17" ]] ; then
        #cd "$HOME/.e/e17/config/standard"

        #eet -d e.cfg config e.cfg.src

        #if ! grep -qs "value \"icon_theme\" string: \"gnome\";" e.cfg.src ; then
            #zenity --warning --text="$( eval_gettext "Your icons seems to be wrongly configured, press ok to restart your configuration" )"
            #killall -9 enlightenment
            #rm -rf "$HOME/.e" "$HOME/.xsession-errors"
        #fi

        #rm -f e.cfg.src
    #fi

    el_config_get

    verify_desktop_health

    # not implemented yet
    #verify_configuration_validity

    # kill any possible previous session of E (needed for any possible hanged one and to not have duplicated processes)
    # FIXME: this can be very bad if it's a double session (like startx from another terminal or using the user-switching feature stuff, already implemented)
    #while read -ru 3 line
    #do
        #kill -9 "$line" 1>/dev/null 2>&1 || true
    #done 3<<< "$( ps ux | grep -E "\s+$(which enlightenment)$" | grep -E "^(${USER}|${UID})\s+" | awk '{print $2}' )"


    #
    # Start E
    #

    rm -f "$HOME/.xsession-errors"


    #unset E_CONF_PROFILE
    #enlightenment_start "$@" 2>"$HOME/.xsession-errors" 1>/dev/null  &
    # TODO: maybe run it in a "while read line" so that we can parse all the results here?

    #EL_DEBUG="$_el_debug" enlightenment_start "$@" 2>&1 | tee "$HOME/.xsession-errors" &
    #TODO: better way to unset variables?
    # TODO: unset all of them, seems like we don't inherit them, since they are set AFTER here
    # NOTE: do not use "tee", it will block the exit/logout of E
    TEXTDOMAIN="" \
        is_e_restarted_fast_too_much="" \
        enlightenment_start "$@" 2>&1 &

        #enlightenment_start "$@" 2>&1 | tee "$HOME/.xsession-errors" &
    # wait that desktop finishes to start before to run checkers
    sleep 15

    # this watcher stops after no more enlightenment process is running
    watch_enlightenment_blocked

    # watcher checks the pid so this should always finish correctly, but we need to wait for E to close
    wait

    # trigger correctly the exit callbacks
    exit 0
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

