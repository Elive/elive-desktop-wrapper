#!/bin/bash
source /usr/lib/elive-tools/functions
#el_make_environment
. gettext.sh
TEXTDOMAIN="desktopwrapper"
export TEXTDOMAIN

# no need to enable since we have el_error & debug info
#set -x
#_el_debug="$EL_DEBUG"
#export EL_DEBUG=3
#set -E # we should not use this or we will always get exit errors (

counter_crash_amount=0
counter_crash_fast_amount=0

limit_crash_amount=3
limit_crash_time=240 # previous crash happened in less than 4 minutes
limit_logs_check="$(( 2 * 60 * 60 ))" # two hours

counter_logs_time_last="$( date +%s )"
pid_wrapper="$$"
# unused, don't enable it
#E_CONF_PROFILE="standard"

# Lock system (modified for this tool) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    rm -f "$lockfile"
    kill -9 "$e_pid" 2>/dev/null || true
}
exit_error(){
    exit_pid="$!"
    rm -f "$lockfile"
    kill -9 "$e_pid" 2>/dev/null || true
    el_error "exit error '${exit_pid}' trap triggered from $(basename $0) - ${FUNCNAME[@]}"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
# FIXME: if process is running do a while loop waiting (entire minute or equivalent) to see if finishes the previous process or exit)
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    # TODO: kill possible previous wrappers? but ignore if we have already a session opened, we should not need this, so wait to see if we receive any error and if so, implement this part
    #if ! [[ -d "/tmp/e-${USER}@0" ]] ; then
        #kill -9 "$( ps ux | grep -v "$pid_wrapper" | grep -v grep | grep -E "\s+$( readlink -f "$0")$" | tail -1 )" 2>/dev/null || true
        #kill -9 "$( ps ux | grep -v "$pid_wrapper" | grep -v grep | grep -E "\s+$( readlink -f "$0")$" | tail -1 )" 2>/dev/null || true
    #fi
    # TODO: remove later this entry, since it can make the startup much slower!
    el_error "$(basename $0) already running? forced exit needed? continuing... this should never happen\n$(ps aux | grep -vE "($pid_wrapper|grep)" | grep -E "($0|$(readlink -f $0)|enlightenment)" )"
    #exit
    echo $$ > "$lockfile"
else
    echo $$ > "$lockfile"
fi
# TODO: remove in the future:
if ps aux | grep -vE "($pid_wrapper|grep)" | grep -qsE "($0|$(readlink -f $0))" ; then
    el_warning "$(basename $0) previously running? forced exit needed? continuing... this should never happen\n$(ps aux | grep -vE "($pid_wrapper|grep)" | grep -E "($0|$(readlink -f $0))" )"
fi
# set a new lockfile no matter what
#echo $$ > "$lockfile"


# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM


# end lock system }}}


restart_desktop_configuration(){
    # elive-skel upgrade {{{
    if [[ -d "$HOME/.e" ]] && timeout 40 zenity --question --text="$( eval_gettext "Do you want restore your desktop configuration from your last login instead of restart a new conf?" )" ; then
        cd "$HOME/.e"
        bkp get
        cd
    else
        elive-skel upgrade ".e"
    fi

    # restart counter and variable
    is_e_restarted_fast_too_much=0
    el_config_save "is_e_restarted_fast_too_much"
    # - elive-skel upgrade }}}
    # notify user {{{
    el_speak_text "a-live desktop configuration upgraded"

    timeout 50 zenity --info --text="$( eval_gettext "Your desktop configuration has been restored, the old configuration is backuped in:" )\n$HOME/.e.old"

    # - notify user }}}
}

verify_desktop_health(){
    # E seems like to be unusable due to too much crashes {{{
    if ((is_e_restarted_fast_too_much)) ; then
        # TODO: remove in the future
        el_speak_text "desktop restarted too much, suggested to start with a new configuration"

        if timeout 40 zenity --question --text="$( eval_gettext "Your desktop seems to have recently crashed too much, do you want to restart a new configuration?" )" ; then
            restart_desktop_configuration
        fi

        # restart counter
        is_e_restarted_fast_too_much=0
        el_config_save "is_e_restarted_fast_too_much"

        el_warning "E restarted fastly too much - versions:\n$(dpkg -l | grep -E "^ii.*(libefl1|e17-stable|e17|elive-tools|deliver|elive-desktop)" | awk '{print $2" : "$3}' )"
    else
        # always do a backup before to start, this will be run in the loop checker
        if [[ -d "$HOME/.e" ]] && [[ "$( LC_ALL=C du -s "$HOME/.e" | awk '{print $1}' )" -gt 400 ]] ; then
            is_backup_wanted=1
        fi
    fi

    # }}}
}

#verify_configuration_validity(){
    ## verify configurations {{{
    ## TODO: check confs of different settings (one for each, like pager, ibox, etc)
    #el_check_variables "E_CONF_PROFILE"

    ## TODO: we can use enlightenment_remote -module-list | grep "pager -- Enabled" to know if module is loaded or not

    #if [[ -s "$HOME/.e/e17/config/$E_CONF_PROFILE/e.cfg" ]] ; then
        #cd "$HOME/.e/e17/config/$E_CONF_PROFILE"
        #eet -d e.cfg config e.cfg.src
        #while read -ru 3 line
        #do
            #el_debug "$line"
            #if [[ "$line" = *"group \"E_Config_Module\" struct {"* ]] ; then
                #el_warning "config structure"
            #fi
        #done 3<<< "$( cat "e.cfg.src")"


    #else
        #el_error "Invalid E profile using? $E_CONF_PROFILE"
    #fi
    ## - verify configurations }}}
    ## restore desktop {{{
    #if ((is_e_configuration_invalid)) ; then
        #if zenity --question --text="$( eval_gettext "Seems like your desktop has an invalid configuration. Do you want to restart to a new configuration?" )" ; then
            #restart_desktop_configuration
        #fi

        ## restart counter
        #is_e_configuration_invalid=0
        #el_config_save "is_e_configuration_invalid"
    #fi
    ## - restore desktop }}}
#}

crashes_watcher(){
    if [[ -s "$HOME/.e-crashdump.txt" ]] ; then
        counter_crash_time_last="$( echo "$(date +%s) - $( stat -c %Z "$HOME/.e-crashdump.txt" )" | LC_ALL=C bc -l | sed -e 's|\..*$||g' )"
        counter_crash_amount="$(( $counter_crash_amount + 1 ))"

        if [[ "$counter_crash_time_last" -lt "$limit_crash_time" ]] ; then
            counter_crash_fast_amount="$(( $counter_crash_fast_amount + 1 ))"
        else
            counter_crash_fast_amount=0
        fi

        if [[ "$counter_crash_fast_amount" -gt "$limit_crash_amount" ]] ; then
            is_e_restarted_fast_too_much=1
            el_config_save "is_e_restarted_fast_too_much"
        else
            # restart counter
            is_e_restarted_fast_too_much=0
            el_config_save "is_e_restarted_fast_too_much"
        fi
    fi
}


send_e_crash_to_elive(){
    # report anonymous crashes to elive (with user's permission) {{{
    #local eliveversion send_debug_reports_email send_debug_reports id

    if ((is_e_restarted)) ; then
        unset is_e_restarted
    else
        if [[ -s "$HOME/.e-crashdump.txt" ]] && el_verify_internet ; then
            crashes_watcher

            # send debug reports {{{
            if [[ -s "/etc/elive/settings" ]] ; then
                source "/etc/elive/settings" 1>/dev/null 2>&1
            fi
            # if user has not configured the reports configurator is not a problem: el_error & others will ask about that (one time)
            if [[ -s "$HOME/.config/elive/settings" ]] ; then
                source "$HOME/.config/elive/settings"
            fi

            if [[ "$send_debug_reports" = "yes" ]] ; then
                #eliveversion="$( awk '$1 ~ /elive-version/ {($1="");print $0}' /etc/elive-version | sed 's/^\ //g' )"
                eliveversion="$( el_elive_version_get )"
                # create an unique identifier
                if el_check_sudo_automated ; then
                    id="$( timeout 3 sudo blkid | grep -oP 'UUID="\K[^"]+' | sha256sum | awk '{print $1}' || true )"
                else
                    id="$( ip a | grep -E "(link/ether|fe80)" | sha256sum | awk '{print $1}' || true )"
                fi

                if [[ -z "$send_debug_reports_email" ]] ; then
                    send_debug_reports_email="anonymous:${id}"
                fi


                # send
                if ! { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1 ; then

                    LC_ALL=C sleep 2
                    if ! { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1 ; then

                        LC_ALL=C sleep 4
                        { echo -e "ELIVE_DATA_TYPE: 1.0::${id}::transfer::text::E17_crash::0::::${send_debug_reports_email}::SIGSEV::$( dpkg -l | grep -E "^ii\s+e17-stable\W+" | awk '{print $3}' | head -1 )::${eliveversion}::" ; cat "$HOME/.e-crashdump.txt" ; } | nc www.elivecd.org 60001 -w 6 1>/dev/null 2>&1

                        fi
                    fi
                fi

                # }}}

        fi
    fi

    rm -f "$HOME/.e-crashdump.txt"

    # }}}
}

restart_enlightenment(){
    # pre {{{
    local pid is_e_restarted fullprocess eliveversion

    # we had before anything useful to report?
    # note: send it before to kill (or the crashdump will have our kill instead)
    send_e_crash_to_elive

    # }}}
    # kill all our E processes running {{{
    while read -ru 3 pid
    do
        [[ -z "$pid" ]] && continue

        fullprocess="$( ps ux | grep -E "\s+$pid\s+" | grep -vE "(enlightenment_alert|e-crashdump)" )"

        # kill only if the alert is not shown
        if ! ps ux | grep -E "\s+$pid\s+" | grep -qsE "(enlightenment_alert|e-crashdump)" ; then

            kill -s SIGSEGV "$pid" 2>/dev/null || true
            is_e_restarted=1

            el_error "E blocked, killing '$pid' to recover it: $fullprocess"
        fi

    done 3<<< "$( ps ux | grep "/usr/bin/enlightenment$" | grep -vE "(enlightenment_alert|e-crashdump)" | awk '{print $2}' )"

    # }}}
    # notify user that E has been restarted by Elive {{{
    if ((is_e_restarted)) ; then
        #el_notify_user "Enlightnement Restarted" "Elive recovered a crash of your desktop saving your working state and opened windows. Thank you Elive!"
        # tell the user in a very nice fashion way
        #el_speak_text "a-live desktop initiated special recovery"
        el_speak_text "ai-live desktop initiated recovery"

        LC_ALL=C sleep 20
        notify-send -t 20000 "Enlightnement Restarted" "$( eval_gettext "Elive detected a failure and recovered your desktop saving your working windows" )" &

        # get new pid if changed {{{
        if ((is_e_restarted)) ; then

            for count in "$( seq 10 )" ; do
                e_pid="$( LC_ALL=C pidof enlightenment)"

                if [[ -n "$e_pid" ]] ; then
                    break
                else
                    LC_ALL=C sleep 1
                fi
            done
        fi

        # }}}

        # see if we restarted too much, if so, it will be asked to recover configuration in the next startx
        crashes_watcher

        # this will delete the variable and the crashdump
        send_e_crash_to_elive

        # we never want this backtrace, so we killed it manually, no useful info here
        #rm -f "$HOME/.e-crashdump.txt"
    fi


    # }}}
}

watch_enlightenment_blocked(){
    local pong count

    # get new pid at the start of E {{{
    for count in "$( seq 20 )" ; do
        e_pid="$( LC_ALL=C pidof enlightenment)"

        if [[ -n "$e_pid" ]] ; then
            break
        else
            LC_ALL=C sleep 1
        fi
    done

    # }}}
    # if we don't have pidof, enlightenment_start has finished so the loop ends and we exit from the script
    #while [[ -O "/proc/${e_pid}/cmdline" ]]
    #while kill -0 "$e_pid" 2>/dev/null
    # update: pid can be changed if E crashes itself, so dont use it
    while true
    do
        # get actual pid
        #e_pid="$( LC_ALL=C pidof enlightenment)"

        # if there's no pid, E has finished, so let's exit, and do not try to get a new one first
        if [[ ! -n "$e_pid" ]] ; then
            break
        fi
        #if [[ ! -n "$e_pid" ]] || ! kill -0 "$e_pid" 2>/dev/null ; then
            ## if E not answer, try again and if not, exit
            #sleep 2
            #e_pid="$( LC_ALL=C pidof enlightenment)"

            #if [[ ! -n "$e_pid" ]] ; then
                ## TODO: remove in teh future: slownesses, or add noreports (warning inheritances)
                ##el_warning "unable to get pidof of E, so if E has been finished/closed we should exit this tool"
                #break
            #fi
        #fi

        # check if process is correctly running
        if LC_ALL=C kill -0 "$e_pid" 2>/dev/null ; then

            pong="$( LC_ALL=C timeout 10 enlightenment_remote -ping 2>/dev/null || true )"
            if ! [[ "$pong" = *"pong" ]] ; then
                LC_ALL=C sleep 2

                pong="$( LC_ALL=C timeout 10 enlightenment_remote -ping 2>/dev/null || true )"
                if ! [[ "$pong" = *"pong" ]] ; then
                    LC_ALL=C sleep 3

                    pong="$( LC_ALL=C timeout 10 enlightenment_remote -ping 2>/dev/null || true )"
                    if ! [[ "$pong" = *"pong" ]] ; then
                        # note: this could happen too if dbus is not running under E
                        restart_enlightenment
                    fi
                fi
            fi

            # save if we are using a different profile
            #E_CONF_PROFILE="$( enlightenment_remote -default-profile-get )"
            #if [[ "$E_CONF_PROFILE" != "standard" ]] ; then
            #el_config_save "E_CONF_PROFILE"
            #fi

            # evalate if a check every X time
            counter_logs_time_now="$( LC_ALL=C date +%s )"
            if [[ "$counter_logs_time_now" -gt "$(( $counter_logs_time_last + $limit_logs_check ))" ]] ; then
                counter_logs_time_last="$( LC_ALL=C date +%s )"

                if [[ "$( du -s "$HOME/.xsession-errors" | awk '{print $1}' )" -gt 20000 ]] ; then
                    #el_warning "cleaned xsession-errors file because has more than 20 MB"
                    : > "$HOME/.xsession-errors"
                fi
            fi

        else
            # try to get a new pid
            if [[ "$( LC_ALL=C pidof enlightenment_start)" ]] ; then
                LC_ALL=C sleep 5
                e_pid="$( LC_ALL=C pidof enlightenment)"
            fi
        fi


        # check every:
        # FIXME: a low value eats resources, a big value will not run your X because process is already running... what we should do?
        # TODO: include a timer in the lockfile check with a max wait time based in these values (asigned from variables)
        # FIXME: there's a problem with the pause, it can be bigger but everytime we exit from E we are stuck on this layer (and so the loop)

        # fast checks that E is running (otherwise we are stuck on the wrapper until the full sleep finishes, and we don't want that when we exit E)
        for count in "$( seq 15 )" ; do
            if LC_ALL=C kill -0 "$e_pid" 1>/dev/null 2>&1 ; then
                # pause per loop
                LC_ALL=C sleep 1
            else
                # maybe E has restarted itself (own crash)
                if [[ -n "$( LC_ALL=C pidof enlightenment_start)" ]] ; then
                    e_pid="$( LC_ALL=C pidof enlightenment)"
                else
                    break 2
                fi
            fi
        done

        # did we wanted to do a backup?
        if ((is_backup_wanted)) ; then
            unset is_backup_wanted

            if [[ -d "$HOME/.e" ]] ; then
                cd "$HOME/.e"
                bkp remove
                bkp save
                cd
            fi
        fi

    done
}

main(){
    # pre {{{

    # }}}
    # TODO:
    # - trap E that doesn't ping (kill -s SIGSEGV to restart)
    #           - implemented in eremote
    #       - don't ask in the gui if restart, just restart (F1 option)
    # - trap the returning signal by e17, and ask (restore conf?) (should be always 0 ?)
    #       - looks like its not returned as an error (enlightenment_start return is not enlightenment one)
    # - check for configurations to see if user broken something (each 5 minutes maybe could be a good thing)
    # - truncate .xsession-errors every X mb
    # - if multiple crashes (set a counter of crashes and amount of time), ask to the user if restore the default E configuration (like 3 in 1 minute, or 4 in 2 minutes)
    # - in case of sending debug & "anonymous", ask the user if wants to report debug data (and ask for email, so we can contact him), save this conf to /etc
    # XXX: done until here
    # if E has been run for more than X days (RAM usage grows over time) like 1 week, restart it -- or check the memory consumption better (so it can grow faster due to errors, or maybe not-so-needed)
    # incremental backups of E dir (bkp), with automatic restore if user breaks it (instead of restart E conf, which can be a good option too?)
    # include "speaking actions with el_speak_text -f, like: initiating special elive recovering
    #   - what if the user wants to disable them?
    # implement a special way to upgrade the system (in order that we can found bugs after the release, something like an wget or similar..)
    # - if ecomorph is already running, kill it when exiting from E
    # - fill everything with el_error and el_warning, or el_report_bug... to know about things that happens!
    #
    # - if we run E without dbus (or module unloaded?), this tool will lead to inifinite loops, so instead, do a pause asking the user to load the module
    #
    #
    #

    #if [[ -d "$HOME/.e/e17" ]] ; then
        #cd "$HOME/.e/e17/config/standard"

        #eet -d e.cfg config e.cfg.src

        #if ! grep -qs "value \"icon_theme\" string: \"gnome\";" e.cfg.src ; then
            #zenity --warning --text="$( eval_gettext "Your icons seems to be wrongly configured, press ok to restart your configuration" )"
            #killall -9 enlightenment
            #rm -rf "$HOME/.e" "$HOME/.xsession-errors"
        #fi

        #rm -f e.cfg.src
    #fi

    el_config_get

    verify_desktop_health

    # not implemented yet
    #verify_configuration_validity

    # kill any possible previous session of E (needed for any possible hanged one and to not have duplicated processes)
    # FIXME: this can be very bad if it's a double session (like startx from another terminal or using the user-switching feature stuff, already implemented)
    #while read -ru 3 line
    #do
        #kill -9 "$line" 1>/dev/null 2>&1 || true
    #done 3<<< "$( ps ux | grep -E "\s+$(which enlightenment)$" | grep -E "^(${USER}|${UID})\s+" | awk '{print $2}' )"


    #
    # Start E
    #

    rm -f "$HOME/.xsession-errors"


    #unset E_CONF_PROFILE
    #enlightenment_start "$@" 2>"$HOME/.xsession-errors" 1>/dev/null  &
    # TODO: maybe run it in a "while read line" so that we can parse all the results here?

    #EL_DEBUG="$_el_debug" enlightenment_start "$@" 2>&1 | tee "$HOME/.xsession-errors" &
    #TODO: better way to unset variables?
    # TODO: unset all of them, seems like we don't inherit them, since they are set AFTER here
    TEXTDOMAIN="" \
        is_e_restarted_fast_too_much="" \
        enlightenment_start "$@" 2>&1 | tee "$HOME/.xsession-errors" &

    # wait that desktop finishes to start before to run checkers
    sleep 10

    # this watcher stops after no more enlightenment process is running
    watch_enlightenment_blocked

    # watcher checks the pid so this should always finish correctly, but we need to wait for E to close
    wait

    # close things when exiting E
    if ! [[ -d "/tmp/e-${USER}@1" ]] ; then
        killall ecomorph 1>/dev/null 2>&1 || killall -9 ecomorph 1>/dev/null 2>&1 || true
    fi
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

